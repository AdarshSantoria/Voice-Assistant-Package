D:\Voice-Assistant-Package\voiceassistant\node_modules\@livekit\react-native-webrtc\android\src\main\java\com\oney\WebRTCModule\SerializeUtils.java:72: Warning: Implicitly using the default locale is a common source of bugs: Use toLowerCase(Locale) instead. For strings meant to be internal use Locale.ROOT, otherwise Locale.getDefault(). [DefaultLocale]
        trackInfo.putString("readyState", track.state().toString().toLowerCase());
                                                                   ~~~~~~~~~~~

   Explanation for issues of type "DefaultLocale":
   Calling String#toLowerCase() or #toUpperCase() without specifying an
   explicit locale is a common source of bugs. The reason for that is that
   those methods will use the current locale on the user's device, and even
   though the code appears to work correctly when you are developing the app,
   it will fail in some locales. For example, in the Turkish locale, the
   uppercase replacement for i is not I.

   If you want the methods to just perform ASCII replacement, for example to
   convert an enum name, call String#toUpperCase(Locale.ROOT) instead. If you
   really want to use the current locale, call
   String#toUpperCase(Locale.getDefault()) instead.

   https://developer.android.com/reference/java/util/Locale.html#default_locale

D:\Voice-Assistant-Package\voiceassistant\node_modules\@livekit\react-native-webrtc\android\build.gradle:34: Warning: A newer version of androidx.core:core than 1.7.0 is available: 1.13.1 [GradleDependency]
    implementation "androidx.core:core:1.7.0"
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "GradleDependency":
   This detector looks for usages of libraries where the version you are using
   is not the current stable release. Using older versions is fine, and there
   are cases where you deliberately want to stick with an older version.
   However, you may simply not be aware that a more recent version is
   available, and that is what this lint check helps find.

D:\Voice-Assistant-Package\voiceassistant\node_modules\@livekit\react-native-webrtc\android\build.gradle:32: Warning: Avoid using + in version numbers; can lead to unpredictable and unrepeatable builds (com.facebook.react:react-native:+) [GradleDynamicVersion]
    implementation 'com.facebook.react:react-native:+'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "GradleDynamicVersion":
   Using + in dependencies lets you automatically pick up the latest available
   version rather than a specific, named version. However, this is not
   recommended; your builds are not repeatable; you may have tested with a
   slightly different version than what the build server used. (Using a
   dynamic version as the major version number is more problematic than using
   it in the minor version position.)

D:\Voice-Assistant-Package\voiceassistant\node_modules\@livekit\react-native-webrtc\android\src\main\java\com\oney\WebRTCModule\MediaProjectionNotification.java:73: Warning: Use of this function is discouraged because resource reflection makes it harder to perform build optimizations and compile-time verification of code. It is much more efficient to retrieve resources by identifier (e.g. R.foo.bar) than by name (e.g. getIdentifier("bar", "foo", null)). [DiscouragedApi]
                .setSmallIcon(context.getResources().getIdentifier("ic_notification", "drawable", context.getPackageName()))
                                                     ~~~~~~~~~~~~~

   Explanation for issues of type "DiscouragedApi":
   Discouraged APIs are allowed and are not deprecated, but they may be unfit
   for common use (e.g. due to slow performance or subtle behavior).

D:\Voice-Assistant-Package\voiceassistant\node_modules\@livekit\react-native-webrtc\android\src\main\java\com\oney\WebRTCModule\EglUtils.java:34: Warning: Unnecessary; SDK_INT is always >= 24 [ObsoleteSdkInt]
                if (VERSION.SDK_INT >= 18) {
                    ~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "ObsoleteSdkInt":
   This check flags version checks that are not necessary, because the
   minSdkVersion (or surrounding known API level) is already at least as high
   as the version checked for.

   Similarly, it also looks for resources in -vNN folders, such as values-v14
   where the version qualifier is less than or equal to the minSdkVersion,
   where the contents should be merged into the best folder.

0 errors, 5 warnings
